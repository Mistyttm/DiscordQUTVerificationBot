  #@commands.command(
  #  name="events",
  #  brief="Make an event",
  #  help="Command to create an event"
  #)
  #async def create_guild_event(
  #      self,
  #      guild_id: str,
  #      event_name: str,
  #      event_description: str,
  #      event_start_time: str,
  #      event_end_time: str,
  #      event_metadata: str,
  #      event_privacy_level=2,
  #      channel_id=None
  #  ) -> None:
  #      '''Creates a guild event using the supplied arguments
  #      The expected event_metadata format is event_metadata={'location': 'YOUR_LOCATION_NAME'}
  #      The required time format is %Y-%m-%dT%H:%M:%S'''
  #      event_create_url = f'{self.base_api_url}/guilds/{guild_id}/scheduled-events'
  #      event_data = json.dumps({
  #          'name': event_name,
  #          'privacy_level': event_privacy_level,
  #          'scheduled_start_time': event_start_time,
  #          'scheduled_end_time': event_end_time,
  #          'description': event_description,
  #          'channel_id': channel_id,
  #          'entity_metadata': {'location': f'{event_metadata}'},
  #          'entity_type': 3
  #      })
  #      async with aiohttp.ClientSession(headers=self.auth_headers) as session:
  #          try:
  #              async with session.post(event_create_url, data=event_data) as response:
  #                  response.raise_for_status()
  #                  assert response.status == 200
  #          except Exception as e:
  #              print(f'EXCEPTION: {e}')
  #          finally:
  #              await session.close()